# Code for calculating player EXP and show UI for the player rank and progressbar

using { /Fortnite.com/Devices }
using { /Fortnite.com/Game }
using { /Fortnite.com/Characters }
using { /Fortnite.com/UI }

using { /Verse.org/Assets }
using { /Verse.org/Colors/NamedColors }
using { /Verse.org/Simulation }

using { /UnrealEngine.com/Temporary/Diagnostics }
using { /UnrealEngine.com/Temporary/UI }
using { /UnrealEngine.com/Temporary/SpatialMath }

# converts strings to messages
SM<localizes>(Message: string):message = "{Message}"

# names of each rank
RankDefinitions : []string = array{"Soil","Wood","Iron","Bronze", "Silver", "Gold","Platinum","Monke","Cheepanze"}

# score needed to progress to the next rank
RankScores : []int = array{10, 20, 30, 40, 50, 60, 70, 80, 90}

# rank textures
RankedImages : []texture = array:
    ProgressBar.bronze_iii
    ProgressBar.silver_iii
    ProgressBar.gold_iii
    ProgressBar.bronze_iii
    ProgressBar.silver_iii
    ProgressBar.gold_iii
    ProgressBar.bronze_iii
    ProgressBar.silver_iii
    ProgressBar.gold_iii

# returns an index based on tracker value
GetPlayerRank(Rank: int):int=
    if(Rank < 10):
        return 0
    else if (Rank >= 10 and Rank < 20):
        return 1
    else if (Rank >= 20 and Rank < 30):
        return 2
    else if (Rank >= 30 and Rank < 40):
        return 3
    else if (Rank >= 40 and Rank < 50):
        return 4
    else if (Rank >= 50 and Rank < 60):
        return 5
    else if (Rank >= 60 and Rank < 70):
        return 6
    else if (Rank >= 70 and Rank < 80):
        return 7
    else:
        return 8

# create UI for each player
CreateRankedCanvas(TextBlock:text_block, TextureRank:texture_block):canvas=

    RankedOverlay := stack_box:
        Orientation := orientation.Horizontal
        Slots := array:
            stack_box_slot:
                Widget := TextureRank # widget you want to place (text_block | texture_block) etc...
                Padding := margin{Right := 5.0}
                HorizontalAlignment := horizontal_alignment.Center
                VerticalAlignment := vertical_alignment.Center

    RankedPercentage := overlay:
        Slots := array:
            overlay_slot:
                Widget := TextBlock # another widget
                HorizontalAlignment := horizontal_alignment.Center
                VerticalAlignment := vertical_alignment.Center

    # Y Top 0, Bottom 1
    # X Left 0, Right 1
    RankedCanvas := canvas:
        Slots := array:
            canvas_slot:
                Anchors := anchors{Minimum := vector2{X := 0.09, Y := 0.77}, Maximum := vector2{X := 0.09, Y := 0.77}}
                Offsets := margin{Top := 0.0, Left := 0.0, Right := 0.0, Bottom := 0.0}
                Alignment := vector2{X := 0.5, Y := 0.0}
                SizeToContent := true
                ZOrder := 0
                Widget := RankedOverlay # texture_block created earlier the ranked image (soid, wood, etc)
            canvas_slot:
                Anchors := anchors{Minimum := vector2{X := 0.25, Y := 0.776}, Maximum := vector2{X := 0.25, Y := 0.776}}
                Offsets := margin{Top := 0.0, Left := 0.0, Right := 0.0, Bottom := 0.0}
                Alignment := vector2{X := 0.5, Y := 0.0}
                SizeToContent := true
                ZOrder := 0
                Widget := RankedOverlay # text_block to show progression 0/10

    return RankedCanvas

# creative device class
XP_second := class(creative_device):

    var PlayerMap : [agent]cp = map{}

    @editable PlayerSpawners : []player_spawner_device = array{}
    @editable Tracker : tracker_device = tracker_device{}
    @editable Trigger : trigger_device = trigger_device{}
    @editable Sequencer : cinematic_sequence_device = cinematic_sequence_device{}
    @editable SequenceHUD : hud_message_device = hud_message_device{}

    OnBegin<override>()<suspends>:void=
        for (PlayerSpawner : PlayerSpawners):
            PlayerSpawner.SpawnedEvent.Subscribe(OnPlayerSpawned)

        Trigger.TriggeredEvent.Subscribe(OnEliminated)

    OnEliminated(MaybeAgent: ?agent):void=
        if(Player := PlayerMap[MaybeAgent?]):
            Tracker.Increment(Player.Agent)
            Player.UpdateRank(Tracker.GetValue(Player.Agent))
            
    OnPlayerSpawned(Agent: agent):void=
        if(PlayerReal := PlayerMap[Agent]):
            # do nothing
        else:
            if(Player := player[Agent], NewP : cp = cp{
                Agent := Agent,
                PlayerSequencer := Sequencer,
                PlayerUI := GetPlayerUI[Player],
                PlayerSequenceHUD := SequenceHUD}):

                    if(set PlayerMap[Agent] = NewP):
                        NewP.InitPlayer(Tracker.GetValue(Agent))

# custom player class
cp := class():
    Agent : agent
    PlayerUI : player_ui
    PlayerSequencer : cinematic_sequence_device
    PlayerSequenceHUD : hud_message_device

    var TextBlock : text_block = text_block{DefaultTextColor := White}
    var TextureRank : texture_block = texture_block{DefaultImage := ProgressBar.bronze_iii, DefaultDesiredSize := vector2{X := 60.0, Y := 60.0}}

    InitPlayer(TrackerValue: int):void=
        PlayerRankedCanvas := CreateRankedCanvas(TextBlock, TextureRank)
        UpdateRank(TrackerValue)
        PlayerSequenceHUD.Show(Agent) # show the progress bar HUD to each agent. *DON'T FORGET*
        PlayerUI.AddWidget(PlayerRankedCanvas)

    UpdateRank(TrackerValue: int):void=
        Rank := GetPlayerRank(TrackerValue)
        if(Target := RankScores[Rank], RankDef := RankDefinitions[Rank], RankedImage := RankedImages[Rank]):
            TextureRank.SetImage(RankedImage)

            # substract previous rank from current rank to simulate resetting tracker and progress bar
            if:
                Rank > 0 and Rank <= 7
                OldRank := RankScores[Rank-1]
            then:
                TextBlock.SetText( SM("{TrackerValue-OldRank}/{Target-OldRank}")) # Tracker = 10, Wood = (10 - 10), (80 - 10) (0,70)
                SetFrameValue(TrackerValue-OldRank, Target-OldRank)
            
            # not needed when rank is lte 0
            if (Rank <= 0):
                TextBlock.SetText( SM("{TrackerValue} / {Target}"))
                SetFrameValue(TrackerValue, Target)

            # player has reached max rank, empty text_block and setframe to full
            if (Rank = 8):
                TextBlock.SetText(SM(""))
                SetFrameValue(90,90)

    SetFrameValue(Value: int, Target: int):void=
        if:
            # progress bar frames 30fps * 10sec = 300
            Frame := Round[(Value * 1.0) / (Target * 1.0) * 250]
        then:
            PlayerSequencer.SetPlaybackFrame(Frame)
            PlayerSequencer.TogglePause(Agent)
            spawn:
                PauseFrame(Frame)

    PauseFrame(Frame: int)<suspends>:void=
        Sleep(0.00001)
        PlayerSequencer.SetPlaybackFrame(Frame)
        PlayerSequencer.TogglePause(Agent)
